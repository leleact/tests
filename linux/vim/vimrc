" normal {{{
source $VIMRUNTIME/vimrc_example.vim

if has("mouse")
    set mouse=
endif

if has("gui_running")
    syntax on
    set hlsearch
endif

" }}}

" vim-plug {{{
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
"
" Make sure you use single quotes

" Coding {
Plug 'Valloric/YouCompleteMe'
Plug 'scrooloose/syntastic'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'jsfaint/gen_tags.vim'
Plug 'rhysd/vim-clang-format'
Plug 'vim-scripts/Conque-GDB'
Plug 'davidhalter/jedi-vim'
Plug 'rust-lang/rust.vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" }

" Useful {
Plug 'majutsushi/tagbar'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
" <leader> cc comment
" <leader> cu uncomment
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/a.vim'
" Plug 'vim-scripts/vim-auto-save'
" Plug 'gustavo-hms/vim-cscope'
Plug 'vim-scripts/DoxygenToolkit.vim'
" Plug 'gabrielelana/vim-markdown'
Plug 'skywind3000/asyncrun.vim'
" }

" UI {
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tomasr/molokai'
Plug 'flazz/vim-colorschemes'
Plug 'altercation/vim-colors-solarized'
Plug 'vim-jp/vim-cpp'
" }
" Initialize plugin system
call plug#end()

" }}}

" General {
set nocompatible
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set history=1000      " keep 50 lines of command line history
set showcmd           " display incomplete commands
set incsearch         " do incremental searching

set number
set ruler
set ignorecase
set hlsearch
set backup
set backupdir=~/.backupdir
set undofile
set undodir=~/.undodir

set softtabstop=4
set shiftwidth=4
set tabstop=4

set cindent
" vert help cinoptions-values
set cinoptions=g0,N-s
set smarttab

if (has("win32") || has("win64"))
    set encoding=gbk
else
    set encoding=utf-8
endif
set fileencodings=utf-8,gbk

"set nowrapscan					" 查找到文件尾就停止
set wrapscan					" 到文件尾会再次从文件头开始
set expandtab					" 将制表符换成空格
"set list
set listchars=tab:>-,eol:$,trail:-,precedes:<
"set endofline
" }


" Map {
cmap Q q
nmap <F3> :tabp<CR>
nmap <F4> :tabn<CR>
nmap <c-x> :tabclose<CR>
map <F5> :! clang++ -g % && ./a.out<CR>
" }

" UI {
set t_Co=256
set laststatus=2

syntax enable
if has('gui_running')
    set background=light
else
    set background=dark
endif
let g:solarized_termcolors = 256
"colorscheme solarized
colorscheme default

set cursorline
"set cursorcolumn
hi CursorLine cterm=NONE ctermbg=0 ctermfg=NONE guibg=NONE guifg=NONE " set cursor color help highlight

if has("gui_running") && (has("win32") || has("win64"))
    set guifont=YaHei\ \Consolas\ Hybrid:h12:cDEFAULT
endif
" }


" Plugin {
" YoucompletMe {
nnoremap <leader>gi :YcmCompleter GoToInclude<CR>			"Supported in filetypes: c, cpp, objc, objcpp
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>		"Supported in filetypes: c, cpp, objc, objcpp, python, cs
nnoremap <leader>je :YcmCompleter GoToDeclaration<CR>		"Supported in filetypes: c, cpp, objc, objcpp, python, cs
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>		"Supported in filetypes: c, cpp, objc, objcpp, python, cs
nnoremap <leader>ji :YcmCompleter GoToImplementation<CR>	"Supported in filetypes: cs
nnoremap <leader>gt :YcmCompleter GetType<CR>				"Supported in filetypes: c, cpp, objc, objcpp
nnoremap <leader>gp :YcmCompleter GetParent<CR>				"Supported in filetypes: c, cpp, objc, objcpp
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
let g:ycm_rust_src_path="~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_cache_omnifunc = 0
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_echo_current_diagnostic = 1
let g:ycm_key_invoke_completion = '<C-a>'
"let g:ycm_disable_for_files_larger_than_kb = 0 " 关闭大文件打开提示
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
" }



" syntastic {
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
" }


" UltiSnips {
let g:UltiSnipsExpandTrigger='<C-J>'
let g:UltiSnipsJumpForwardTrigger='<C-F>'
let g:UltiSnipsJumpBackwardTrigger='<C-B>'
" }


" NerdTree {
map <F1> :NERDTreeToggle<CR>
map <C-F1> :NERDTreeFind<CR>
let g:NERDTreeWinSize=30
let NERDTreeChDirMode=2			"选中root即设置为当前目录
let NERDTreeQuitOnOpen=0		"打开文件时关闭树
let NERDTreeShowBookmarks=1		"显示书签
let NERDTreeMinimalUI=1			"不显示帮助面板
let NERDTreeDirArrows=0			"目录箭头 1 显示箭头  0传统+-|号
" }

" TagBar {
"autocmd VimEnter * nested TagbarOpen 启动vim时自动打开tagbar
let tagbar_left=0						" 设置 tagbar 1-子窗口的位置出现在主编辑区的左边, 0-右边[默认]
nnoremap <F2> :TagbarToggle<CR>			" 设置显示／隐藏标签列表子窗口的快捷键。速记：tag list
let tagbar_width = 30					" 设置标签子窗口的宽度
let g:tagbar_compact = 1				" tagbar 子窗口中不显示冗余帮助信息
" 设置 ctags 对哪些代码元素生成标签
let g:tagbar_type_cpp = {
            \ 'ctagstype' : 'c++',
            \ 'kinds'     : [
            \ 'd:macros:1:0',
            \ 'p:prototypes:1:0',
            \ 'g:enums',
            \ 'e:enumerators:0:0',
            \ 't:typedefs:0:0',
            \ 'n:namespaces',
            \ 'c:classes',
            \ 's:structs',
            \ 'u:unions',
            \ 'f:functions',
            \ 'm:members:0:0',
            \ 'v:variables:0:0'
            \ ],
            \ 'sro'        : '::',
            \ 'kind2scope' : {
            \ 'g' : 'enum',
            \ 'n' : 'namespace',
            \ 'c' : 'class',
            \ 's' : 'struct',
            \ 'u' : 'union'
            \ },
            \ 'scope2kind' : {
            \ 'enum'      : 'g',
            \ 'namespace' : 'n',
            \ 'class'     : 'c',
            \ 'struct'    : 's',
            \ 'union'     : 'u'
            \ }
            \ }
" }

" Airline {
let g:airline_powerline_fonts = 1
"let g:airline_symbols_ascii = 1
let g:airline#extensions#tabline#enabled = 1

"if !exists('g:airline_sysbols')
"    let g:airline_sysbols = { }
"endif

"let g:airline_theme='solarized'
"let g:airline_theme='xtermlight'
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
" }

" molokai {
let g:molokai_original = 1
let g:rehash256 = 1
" }

" auto save {
let g:auto_save = 1  " enable AutoSave on Vim startup
let g:auto_save_no_updatetime = 1  " do not change the 'updatetime' option
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
" }

" vim-clang-format {
" 似乎不能同时存在
let g:clang_format#detect_style_file = 1
"let g:clang_format#style_options = {
            "\ "AccessModifierOffset" : -4,
            "\ "AllowShortIfStatementsOnASingleLine" : "true",
            "\ "AlwaysBreakTemplateDeclarations" : "true",
            "\ "Standard" : "C++11"}
"let g:clang_format#auto_format_on_insert_leave = 1
let g:clang_format#code_style = "llvm"
" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>
" Auto-enabling auto-formatting uncomment below
" autocmd FileType c ClangFormatAutoEnable
" }

" rust {
" let g:rustfmt_autosave = 1
autocmd FileType rust nnoremap <buffer><Leader>cf :RustFmt<CR>
" }

" }
